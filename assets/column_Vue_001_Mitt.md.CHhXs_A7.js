import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.G09qkdGM.js";const d=JSON.parse('{"title":"解决 mitt 多次触发事件订阅 bug","description":"","frontmatter":{},"headers":[],"relativePath":"column/Vue/001_Mitt.md","filePath":"column/Vue/001_Mitt.md"}'),e={name:"column/Vue/001_Mitt.md"};function l(p,s,h,k,r,E){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="解决-mitt-多次触发事件订阅-bug" tabindex="-1">解决 mitt 多次触发事件订阅 bug <a class="header-anchor" href="#解决-mitt-多次触发事件订阅-bug" aria-label="Permalink to &quot;解决 mitt 多次触发事件订阅 bug&quot;">​</a></h1><h3 id="💬-问题起源" tabindex="-1">💬 问题起源 <a class="header-anchor" href="#💬-问题起源" aria-label="Permalink to &quot;💬 问题起源&quot;">​</a></h3><p>在日常 vue 项目开发中，有时会用到 mitt（前身事件总线 mittBus）进行事件传递，然而使用经常就是 mitt().emit() , mitt().on 就结束了，未考虑到取消订阅事件， 订阅事件会创建回调函数，并将其添加到事件总线中。如果在实例卸载前不取消订阅，这些回调函数将一直存在于内存中， 这就导致同个订阅事件触发时相应多次。</p><h3 id="👌-解决方案" tabindex="-1">👌 解决方案 <a class="header-anchor" href="#👌-解决方案" aria-label="Permalink to &quot;👌 解决方案&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const { proxy } = getCurrentInstance();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 订阅事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  proxy.mittBus.on(&#39;eventName&#39;, () =&gt; { })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  // 实例卸载前取消相关事件订阅</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  onBeforeUnmount(() =&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 取消订阅特定事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  proxy.mittBus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;eventName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 取消订阅所以事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  proxy.mittBus.all.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>附 mitt github 文档，以此记录 <a href="https://github.com/developit/mitt#parameters" target="_blank" rel="noreferrer">https://github.com/developit/mitt#parameters</a></p>`,6)]))}const c=i(e,[["render",l]]);export{d as __pageData,c as default};
