import{_ as s,o as a,c as p,N as n}from"./chunks/framework.d69a0811.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"column/Docker/001_php.md"}'),e={name:"column/Docker/001_php.md"},o=n(`<h2 id="要修改通过-docker-部署的-wordpress-上传文件的大小-你可以按照以下步骤操作" tabindex="-1">要修改通过 Docker 部署的 WordPress 上传文件的大小，你可以按照以下步骤操作： <a class="header-anchor" href="#要修改通过-docker-部署的-wordpress-上传文件的大小-你可以按照以下步骤操作" aria-label="Permalink to &quot;要修改通过 Docker 部署的 WordPress 上传文件的大小，你可以按照以下步骤操作：&quot;">​</a></h2><ol><li><p><strong>进入 Docker 容器</strong>：首先，你需要进入 WordPress 容器内部。可以使用如下命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">exec</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">wordpress</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/bin/bash</span></span></code></pre></div><p>其中<code>wordpress</code>是你的 WordPress 容器的名称或 ID。</p></li><li><p><strong>复制配置文件</strong>：在容器内部，复制<code>php.ini-production</code>文件到<code>php.ini</code>，以便修改生产环境的 PHP 配置：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">cp</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/usr/local/etc/php/php.ini-production</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/usr/local/etc/php/php.ini</span></span></code></pre></div><p>然后，通过<code>cd</code>命令进入到 PHP 配置文件所在的目录：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/usr/local/etc/php</span></span></code></pre></div></li><li><p><strong>更新 APT 包</strong>：在进行配置修改之前，更新容器的 APT 包管理器：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">apt-get</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">update</span></span></code></pre></div></li><li><p><strong>安装文本编辑器</strong>：为了编辑配置文件，你可能需要一个文本编辑器，如<code>vim</code>：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">apt-get</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">install</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">vim</span></span></code></pre></div></li><li><p><strong>编辑 PHP 配置</strong>：使用文本编辑器打开<code>php.ini</code>文件，并修改以下参数：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">vim</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">php.ini</span></span></code></pre></div><p>找到或添加以下行，并修改其后的值为你需要的值（例如，增加上传文件大小限制）：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">upload_max_filesize = 200M   ; 文件大小限制</span></span>
<span class="line"><span style="color:#babed8;">post_max_size = 250M         ; post大小限制</span></span>
<span class="line"><span style="color:#babed8;">memory_limit = 500M          ; 内存占用限制</span></span></code></pre></div><p>注意：这里的单位是 M（兆），你可以根据需要调整这些值。</p></li><li><p><strong>重启 Docker 容器</strong>：保存并退出文本编辑器后，重启 WordPress 容器以使更改生效：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">restart</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">wordpress</span></span></code></pre></div></li><li><p><strong>使用自定义配置文件</strong>：另一种方法是创建一个自定义的 PHP 配置文件（例如<code>uploads.ini</code>），并将其作为覆盖设置添加到容器中。这可以通过修改 Docker 启动命令或 docker-compose 文件来实现，将自定义配置文件挂载到容器内的相应路径下：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">run</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">some-wordpress</span><span style="color:#BABED8;"> [...]</span></span>
<span class="line"><span style="color:#FFCB6B;">-v</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/var/docker/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini</span><span style="color:#BABED8;"> [...]</span></span>
<span class="line"><span style="color:#FFCB6B;">bitnami/wordpress:latest</span></span></code></pre></div><p>其中<code>uploads.ini</code>包含你希望覆盖的 PHP 设置，如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">file_uploads = On</span></span>
<span class="line"><span style="color:#babed8;">memory_limit = 256M</span></span>
<span class="line"><span style="color:#babed8;">upload_max_filesize = 32M</span></span>
<span class="line"><span style="color:#babed8;">post_max_size = 32M</span></span>
<span class="line"><span style="color:#babed8;">max_execution_time = 360</span></span></code></pre></div><p>这种方法允许你不必直接修改容器内的<code>php.ini</code>文件，而是通过挂载自定义配置文件来覆盖特定的设置。</p></li><li><p><strong>注意权限问题</strong>：由于 Docker 容器通常以非 root 用户运行，确保挂载的文件和目录具有适当的权限，UID 通常为 1001。</p></li><li><p><strong>使用环境变量</strong>：在某些情况下，你还可以利用环境变量来设置 PHP 的配置，这可以在运行 Docker 容器时通过<code>--env</code>参数传递。</p></li></ol><p>请根据你的具体需求选择合适的方法，并确保在进行更改后充分测试以验证配置的有效性。</p>`,3),l=[o];function t(c,r,i,d,y,h){return a(),p("div",null,l)}const b=s(e,[["render",t]]);export{B as __pageData,b as default};
