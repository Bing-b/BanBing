import{_ as s,c as a,o as p,ag as l}from"./chunks/framework.G09qkdGM.js";const e="/BanBing/assets/2.nEeMsI9e.png",i="/BanBing/assets/1.Dti7ZgwN.png",g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"column/Docker/deploy.md","filePath":"column/Docker/deploy.md"}'),c={name:"column/Docker/deploy.md"};function t(o,n,r,d,h,u){return p(),a("div",null,n[0]||(n[0]=[l('<h2 id="使用-sh-脚本一键-在-docker-部署-web-项目" tabindex="-1">使用 .sh 脚本一键 在 docker 部署 web 项目 <a class="header-anchor" href="#使用-sh-脚本一键-在-docker-部署-web-项目" aria-label="Permalink to &quot;使用 .sh 脚本一键 在 docker 部署 web 项目&quot;">​</a></h2><h3 id="拉取镜像" tabindex="-1">拉取镜像 <a class="header-anchor" href="#拉取镜像" aria-label="Permalink to &quot;拉取镜像&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker pull nginx</span></span></code></pre></div><p>出现以下输出即拉取成功 <img src="'+e+'" alt="ACE"> 拉取完可通过 <code>docker images</code> 查看镜像列表 <img src="'+i+`" alt="ACE"></p><h3 id="项目准备" tabindex="-1">项目准备 <a class="header-anchor" href="#项目准备" aria-label="Permalink to &quot;项目准备&quot;">​</a></h3><p>例如 vite 项目 ，我们需要在更目录 添加 nginx 配置文件 default.conf 和 docker 配置文件 Dockerfile 分别写入一下内容</p><ul><li>default.conf</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>server {</span></span>
<span class="line"><span>    # 监听 IPv4 的 80 端口</span></span>
<span class="line"><span>    listen       80;</span></span>
<span class="line"><span>    # 监听 IPv6 的 80 端口</span></span>
<span class="line"><span>    listen  [::]:80;</span></span>
<span class="line"><span>    # 设置服务器名称，这里配置为本地主机</span></span>
<span class="line"><span>    server_name  localhost;</span></span>
<span class="line"><span>    # 引入 Nginx 预定义的 MIME 类型配置文件</span></span>
<span class="line"><span>    include mime.types;</span></span>
<span class="line"><span>    # 设置默认的 MIME 类型，当无法确定文件类型时使用</span></span>
<span class="line"><span>    default_type application/octet-stream;</span></span>
<span class="line"><span>    # 开启静态 GZIP 压缩，优先查找并返回 .gz 结尾的压缩文件</span></span>
<span class="line"><span>    gzip_static on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 专门处理 .mjs 文件的配置块</span></span>
<span class="line"><span>    # ~* 表示不区分大小写的正则匹配，\\.mjs$ 匹配所有以 .mjs 结尾的文件</span></span>
<span class="line"><span>    location ~* \\.mjs$ {</span></span>
<span class="line"><span>        # 为 .mjs 文件设置正确的 JavaScript MIME 类型</span></span>
<span class="line"><span>        default_type application/javascript;</span></span>
<span class="line"><span>        # 设置文件根目录</span></span>
<span class="line"><span>        root /usr/share/nginx/html;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 处理所有普通请求的主配置块</span></span>
<span class="line"><span>    location / {</span></span>
<span class="line"><span>        # 设置网站根目录</span></span>
<span class="line"><span>        root   /usr/share/nginx/html;</span></span>
<span class="line"><span>        # URI 请求的文件查找规则：</span></span>
<span class="line"><span>        # 1. 先找完整的 URI 路径</span></span>
<span class="line"><span>        # 2. 再找同名目录下的索引文件</span></span>
<span class="line"><span>        # 3. 都没有则返回 index.html（用于支持前端路由）</span></span>
<span class="line"><span>        try_files $uri $uri/ /index.html;</span></span>
<span class="line"><span>        # 设置默认索引文件</span></span>
<span class="line"><span>        index  index.html index.htm;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # API 代理配置块，用正则表达式匹配以 /graph-platform-api/ 开头的请求</span></span>
<span class="line"><span>    location ~ ^/graph-platform-api/(.*)$ {</span></span>
<span class="line"><span>        # 将请求代理到后端服务器，$1 捕获的是正则中的内容，$is_args$args 用于传递查询参数</span></span>
<span class="line"><span>        proxy_pass http://10.222.222:22/api/$1$is_args$args;</span></span>
<span class="line"><span>        # 设置连接超时时间为 3 秒</span></span>
<span class="line"><span>        proxy_connect_timeout 3;</span></span>
<span class="line"><span>        # 设置发送超时时间为 120 秒</span></span>
<span class="line"><span>        proxy_send_timeout 300;</span></span>
<span class="line"><span>        # 设置读取超时时间为 120 秒</span></span>
<span class="line"><span>        proxy_read_timeout 300;</span></span>
<span class="line"><span>        # 设置代理请求的 HTTP 头信息，用于传递客户端信息</span></span>
<span class="line"><span>        proxy_set_header X-Forwarded-Host \\$host;</span></span>
<span class="line"><span>        proxy_set_header X-Forwarded-Server \\$host;</span></span>
<span class="line"><span>        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>        # 设置客户端请求体的最大值为 100MB</span></span>
<span class="line"><span>        client_max_body_size 100m;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 配置错误页面</span></span>
<span class="line"><span>    error_page   500 502 503 504  /50x.html;</span></span>
<span class="line"><span>    # 错误页面的具体处理配置</span></span>
<span class="line"><span>    location = /50x.html {</span></span>
<span class="line"><span>        # 错误页面存放的根目录</span></span>
<span class="line"><span>        root   html;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>Dockerfile FROM nginx:1.23.1 LABEL maintainer=&quot;username&quot; EXPOSE 80 COPY dist/ /usr/share/nginx/html/ COPY default.conf /etc/nginx/conf.d/</li></ul><h3 id="服务器准备" tabindex="-1">服务器准备 <a class="header-anchor" href="#服务器准备" aria-label="Permalink to &quot;服务器准备&quot;">​</a></h3><p>服务器新建一个文件夹例如 app ，子级分别建一个 config 文件夹 和 application 文件夹</p><ul><li>在 config 里放入之 nginx 配置文件</li><li>在 application 克隆仓库代码</li></ul><h3 id="编写一键部署脚本-deploy-sh" tabindex="-1">编写一键部署脚本 deploy.sh <a class="header-anchor" href="#编写一键部署脚本-deploy-sh" aria-label="Permalink to &quot;编写一键部署脚本 deploy.sh&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#!/bin/bash</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置超时时间（秒）</span></span>
<span class="line"><span>set timeout 30</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置 Git 凭证存储</span></span>
<span class="line"><span>git config --global credential.helper store</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 或者临时存储</span></span>
<span class="line"><span># git config --global credential.helper cache --timeout=3600</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 执行git命令</span></span>
<span class="line"><span>git checkout .</span></span>
<span class="line"><span>git checkout branch</span></span>
<span class="line"><span>git pull origin branch</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 拉取依赖</span></span>
<span class="line"><span>pnpm install</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 打包</span></span>
<span class="line"><span>pnpm build:prod</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if [ ! -d &quot;dist&quot; ]; then</span></span>
<span class="line"><span>  echo &quot;❌ 构建失败，dist 目录未生成&quot;</span></span>
<span class="line"><span>  exit 1</span></span>
<span class="line"><span>else</span></span>
<span class="line"><span>  echo &quot;✅ 构建成功&quot;</span></span>
<span class="line"><span>fi</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 镜像名称和版本</span></span>
<span class="line"><span>IMAGE_NAME=&quot;yaga:v1.0&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 同时检查是否存在同名的容器和镜像，并删除</span></span>
<span class="line"><span>EXISTING_CONTAINER=$(docker ps -a -q --filter &quot;ancestor=$IMAGE_NAME&quot;)</span></span>
<span class="line"><span>EXISTING_IMAGE=$(docker images -q $IMAGE_NAME)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>if [ -n &quot;$EXISTING_CONTAINER&quot; ]; then</span></span>
<span class="line"><span>  echo &quot;存在同名容器，正在删除...&quot;</span></span>
<span class="line"><span>  docker rm -f $EXISTING_CONTAINER</span></span>
<span class="line"><span>fi</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if [ -n &quot;$EXISTING_IMAGE&quot; ]; then</span></span>
<span class="line"><span>  echo &quot;存在同名镜像，正在删除...&quot;</span></span>
<span class="line"><span>  docker rmi -f $EXISTING_IMAGE</span></span>
<span class="line"><span>fi</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 根据 Dockerfile 创建新的 Docker 镜像</span></span>
<span class="line"><span>docker build -t $IMAGE_NAME .</span></span>
<span class="line"><span>echo &quot;Docker 镜像 $IMAGE_NAME 创建完成&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 启动容器</span></span>
<span class="line"><span>echo &#39;正在启动容器&#39;</span></span>
<span class="line"><span>docker run --name appContainer -d -p 8289:80 -v /app/config:/usr/share/nginx/html/config -v /app/config/default.conf:/etc/nginx/conf.d/default.conf -d appImage:v1.0</span></span></code></pre></div><h3 id="执行脚本" tabindex="-1">执行脚本 <a class="header-anchor" href="#执行脚本" aria-label="Permalink to &quot;执行脚本&quot;">​</a></h3><p>将脚本放入 application 根目录 后执行 chmod +x deploy.sh 进行赋权 ，再执行 bash deploy.sh 脚本</p>`,16)]))}const _=s(c,[["render",t]]);export{g as __pageData,_ as default};
